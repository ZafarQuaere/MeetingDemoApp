import com.pgi.convergence.Versions
import groovy.time.TimeCategory
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

apply plugin: 'jacoco'

def flavor = project.hasProperty('flavor') ? project.properties['flavor'].toString().toLowerCase() : "prod"

def fileFilter = [
        '**/*Parcel.class',
        '**/*$CREATOR.class',
        '**/*Test*.*',
        'Shadow*.*',
        '**/AutoValue_*.*',
        '**/*JavascriptBridge.class',
        '**/R.class',
        '**/R$*.class',
        '**/Manifest*.*',
        'android/**/*.*',
        '**/BuildConfig.*',
        '**/*$ViewBinder*.*',
        '**/*$ViewInjector*.*',
        '**/Lambda$*.class',
        '**/Lambda.class',
        '**/*Lambda.class',
        '**/*Lambda*.class',
        '**/*$InjectAdapter.class',
        '**/*$*$*.*',
        '**/*$ModuleAdapter.class',
        '**/*$ViewInjector*.class',
        '**/databinding/**/*.*', // These are all autogenerated classes for binding
        '**/DataBinderMapperImpl*.*',
        '**/DataBindingInfo.*',
        '**/BR.*'
]

def sonarExclusions = [
        '**/gm4/services/legacyws/*.*',
        '**/gm4/ui/*.*',
        '**/gm5/services/audio/softphone/PGiSoftPhone.*',
        '**/gm5/services/audio/softphone/PGiSoftPhoneCallBack.*',
        '**/gm5/services/audio/softphone/PGiSoftPhoneImpl.*',
        '**/gm5/ui/audio/AudioSelectionFragment.*',
        '**/gm5/ui/WebMeetingActivity.*',
        '**/models/*.*',
        '**/models/enterUrlModel/*.*',
        '**/models/getPhoneNumberModel/*.*',
        '**/models/settings/*.*',
        '**/utils/SimpleCustomSnackBar.*',
        '**/enums/WaitingRoomEvents.*',
        '**/utils/CommonUtils.*',
        '**/ui/AppBaseLayoutActivity.*',
        '**/meeting/BaseMeetingActivity.*'
]

def mainSrc = fileTree(dir: '.', include: "**/src/main/java/**/*")
def javaBinaries = fileTree(dir: '.', include: "**/build/intermediates/javac/**/*", excludes: fileFilter)
def kotlinBinaries = fileTree(dir: '.', include: "**/build/tmp/kotlin-classes/**/*", excludes: fileFilter)
def allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"
def reportsPath = fileTree(dir: ".", include: "**/build/reports/jacoco/jacocoTestReport.xml")
def failedTests = []
def testsResults = []

jacoco {
    version = "${Versions.jacoco}"
    toolVersion = "${Versions.jacoco}"
    reportsDir = file("$buildDir/reports/jacoco")
}

android {
    lintOptions {
        baseline file("lint-baseline.xml")
        disable 'GoogleAppIndexingWarning', 'InvalidPackage'
        abortOnError false
        warningsAsErrors false
        xmlReport true
        xmlOutput file("$project.buildDir/outputs/lintXml/lintReport.xml")
        htmlOutput file("$project.buildDir/outputs/lint/lint.html")
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jvmArgs '-noverify'
            maxHeapSize '2048m'
            forkEvery 100
            jvmArgs '-Xmx2048m', '-Xms2048m'
            jacoco {
                excludes = ['jdk.internal.*']
                includeNoLocationClasses = true
            }
            failFast = true
            ignoreFailures = false
        }
    }
}

task jacocoTestReport(type: JacocoReport)  {
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
        html.destination file("${buildDir}/reports/jacoco/jacocoTestReport.html")
        xml.destination file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
    }
    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([javaBinaries], [kotlinBinaries]))
    getExecutionData().setFrom(fileTree(dir: buildDir, includes:
            ['**/*.exec', '**/*.ec']))
}

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: "jacocoTestReport") {
    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.2
            }
        }
    }
    getSourceDirectories().setFrom(files([mainSrc]))
    getClassDirectories().setFrom(files([javaBinaries], [kotlinBinaries]))
    getExecutionData().setFrom(fileTree(dir: buildDir, includes:
            ['**/*.exec', '**/*.ec']))
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include:'**/build/jacoco/*.exec')
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    setMaxParallelForks(Runtime.runtime.availableProcessors().intdiv(2)) // This cannot exceed the value of max-workers defined in gradle.properties
    testLogging {
        events TestLogEvent.FAILED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true
    }
    afterTest { TestDescriptor descriptor, TestResult result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            failedTests << ["${descriptor.className}::${descriptor.name}"]
        }
    }
    afterSuite { desc, result ->
        if (desc.parent) return
        String summary = "${project.name}:${name} results: ${result.resultType} " +
                "(" +
                "${result.testCount} tests, " +
                "${result.successfulTestCount} successes, " +
                "${result.failedTestCount} failures, " +
                "${result.skippedTestCount} skipped" +
                ") " +
                "in ${TimeCategory.minus(new Date(result.endTime), new Date(result.startTime))}" +
                "\n" +
                "Report file: ${reports.html.entryPoint}"

        // Add reports in `testsResults`, keep failed suites at the end
        if (result.resultType == TestResult.ResultType.SUCCESS) {
            testsResults.add(0, summary)
        } else {
            testsResults += summary
        }
    }
}

// TODO:: Check if src is causing coverage to fail
sonarqube {
    androidVariant "${flavor}Debug"
    properties {
        property "sonar.sources", fileTree(dir: "src/main/java", excludes: sonarExclusions)
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/intermediates/javac/${flavor}Debug," +
                "build/tmp/kotlin-classes/${flavor}Debug"
        property "sonar.java.test.binaries", "build/intermediates/javac/${flavor}DebugUnitTest," +
                "build/tmp/kotlin-classes/${flavor}DebugUnitTest"
        property "sonar.android.lint.report", "build/outputs/lintXml/lintReport.xml"
        property "sonar.junit.reportPaths", "build/test-results/test${flavor.capitalize()}DebugUnitTest"
        property "sonar.coverage.jacoco.xmlReportPaths", reportsPath
    }
}

gradle.buildFinished {
    if (!failedTests.empty) {
        println " Failed tests for ${project.name}:"
        failedTests.each { failedTest ->
            println failedTest
        }
        println ""
    }

    if (!testsResults.isEmpty()) {
        printResults testsResults
    }
}

private static void printResults(allResults) {
    def maxLength = allResults*.readLines().flatten().collect { it.length() }.max()

    println "┌${"${"─" * maxLength}"}┐"

    println allResults.collect {
        it.readLines().collect {
            "│" + it + " " * (maxLength - it.length()) + "│"
        }.join("\n")
    }.join("\n├${"${"─" * maxLength}"}┤\n")

    println "└${"${"─" * maxLength}"}┘"
}
